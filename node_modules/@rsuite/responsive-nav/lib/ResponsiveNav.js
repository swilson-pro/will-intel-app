"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _resizeObserver = require("@juggle/resize-observer");

var _rsuite = require("rsuite");

var _RemoveButton = _interopRequireDefault(require("./RemoveButton"));

var _useCustomCompareEffect = _interopRequireDefault(require("./useCustomCompareEffect"));

var _excluded = ["activeKey", "children", "removable", "onItemRemove", "moreText", "moreProps"],
    _excluded2 = ["children", "eventKey", "classPrefix"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ResponsiveNav = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var activeKey = props.activeKey,
      children = props.children,
      removable = props.removable,
      onItemRemove = props.onItemRemove,
      moreText = props.moreText,
      moreProps = props.moreProps,
      rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);

  var _useState = (0, _react.useState)(0),
      width = _useState[0],
      setWidth = _useState[1];

  var _useState2 = (0, _react.useState)(0),
      contentWidth = _useState2[0],
      setContentWidth = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      moreWidth = _useState3[0],
      setMoreWidth = _useState3[1];

  var _useState4 = (0, _react.useState)([]),
      itemWidthList = _useState4[0],
      setItemWidthList = _useState4[1];

  var containerRef = (0, _react.useRef)();
  var moreItemRef = (0, _react.useRef)();
  var resizeObserver = (0, _react.useRef)();
  var placeholderStyles = {
    height: 0,
    overflow: 'hidden'
  };

  var handleResize = function handleResize() {
    var items = containerRef.current.querySelectorAll('.rs-nav-item');

    var containerWidth = _rsuite.DOMHelper.getWidth(containerRef.current);

    var list = [];
    var countWidth = 0;
    Array.from(items).forEach(function (element) {
      var w = _rsuite.DOMHelper.getWidth(element);

      countWidth += w;
      list.push(w);
    });
    setWidth(containerWidth);
    setContentWidth(countWidth);
    setItemWidthList(list);
  };

  (0, _react.useEffect)(function () {
    if (containerRef.current) {
      handleResize();
      resizeObserver.current = new _resizeObserver.ResizeObserver(handleResize);
      resizeObserver.current.observe(containerRef.current);
    }

    return function () {
      var _resizeObserver$curre;

      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (moreItemRef.current && moreWidth === 0) {
      setMoreWidth(_rsuite.DOMHelper.getWidth(moreItemRef.current));
    }
  }, [moreWidth]);
  (0, _useCustomCompareEffect.default)(handleResize, [children], function (prevDeps, nextDeps) {
    var prevChildren = prevDeps[0];
    var nextChildren = nextDeps[0];
    return prevChildren.flat().length === nextChildren.flat().length;
  });

  var renderChildren = function renderChildren() {
    var items = [];

    if (contentWidth <= width) {
      items = children;
    } else {
      var rangeWidth = 0;
      var dropdownItems = [];

      _react.default.Children.forEach(children, function (child, index) {
        var itemWidth = itemWidthList[index];
        rangeWidth += itemWidth;

        if (rangeWidth < width) {
          items.push(child);
        } else {
          dropdownItems.push(child);
        }
      });

      if (dropdownItems.length) {
        dropdownItems.splice(0, 0, items.pop());
        var k = 0;

        for (var i = 0; i < items.length; i++) {
          k += itemWidthList[i];
        }

        if (moreWidth + k > width) {
          dropdownItems.splice(0, 0, items.pop());
        }

        if (items[items.length - 1]) {
          dropdownItems.splice(0, 0, items[items.length - 1]);
        }

        var activeItem = dropdownItems.find(function (item) {
          return item && item.props.eventKey === activeKey;
        });

        if (activeItem) {
          items.splice(items.length - 1, 1, activeItem);
        }

        items.push( /*#__PURE__*/_react.default.createElement(_rsuite.Dropdown, (0, _extends2.default)({
          key: "more",
          ref: moreItemRef
        }, moreProps, {
          title: moreText,
          appearance: "subtle"
        }), dropdownItems.map(function (child, index) {
          if (!child) {
            return null;
          }

          var _child$props = child.props,
              itemChildren = _child$props.children,
              eventKey = _child$props.eventKey,
              classPrefix = _child$props.classPrefix,
              itemRestProps = (0, _objectWithoutPropertiesLoose2.default)(_child$props, _excluded2);
          return /*#__PURE__*/_react.default.createElement(_rsuite.Dropdown.Item, (0, _extends2.default)({
            key: eventKey || index,
            eventKey: eventKey
          }, itemRestProps), itemChildren);
        })));
      }
    }

    if (removable) {
      return items.map(function (item, key) {
        if (~item.type.displayName.indexOf('Nav.Item')) {
          return /*#__PURE__*/_react.default.cloneElement(item, {
            key: key,
            children: /*#__PURE__*/_react.default.createElement(_RemoveButton.default, {
              eventKey: item.props.eventKey,
              activeKey: activeKey,
              onItemRemove: onItemRemove
            }, item.props.children)
          });
        }

        return item;
      });
    }

    return items;
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    ref: containerRef,
    style: placeholderStyles
  }, /*#__PURE__*/_react.default.createElement(_rsuite.Nav, rest, removable ? children.map(function (item, key) {
    return /*#__PURE__*/_react.default.cloneElement(item, {
      key: key,
      children: /*#__PURE__*/_react.default.createElement(_RemoveButton.default, {
        eventKey: item.props.eventKey,
        activeKey: activeKey,
        onItemRemove: onItemRemove
      }, item.props.children)
    });
  }) : children)), /*#__PURE__*/_react.default.createElement(_rsuite.Nav, (0, _extends2.default)({
    ref: ref,
    activeKey: activeKey
  }, rest), renderChildren()));
});

ResponsiveNav.defaultProps = {
  moreText: 'More'
};
ResponsiveNav.propTypes = {
  removable: _propTypes.default.bool,
  onItemRemove: _propTypes.default.func,
  activeKey: _propTypes.default.string,
  children: _propTypes.default.any,
  moreText: _propTypes.default.node,
  moreProps: _propTypes.default.object
};
ResponsiveNav.displayName = 'ResponsiveNav';
ResponsiveNav.Item = _rsuite.Nav.Item;
var _default = ResponsiveNav;
exports.default = _default;